import tkinter as tk
from tkinter import *
from urllib.request import urlopen
from PIL import Image, ImageTk
import requests
from bs4 import BeautifulSoup
import io


class ProductBrowser(tk.Frame):
    """A simple Tkinter app to search Flipkart products and view basic info."""

    def __init__(self, master):
        super().__init__(master, bg="white")
        self.master = master
        self.canvas = tk.Canvas(self, borderwidth=0, background="#ffffff")
        self.scroll_y = tk.Scrollbar(self, orient="vertical", command=self.canvas.yview)
        self.inner_frame = tk.Frame(self.canvas, background="#ffffff")

        # Configure canvas scrolling
        self.canvas.configure(yscrollcommand=self.scroll_y.set)
        self.scroll_y.pack(side="right", fill="y")
        self.canvas.pack(side="left", fill="both", expand=True)
        self.canvas.create_window((0, 0), window=self.inner_frame, anchor="nw")
        self.inner_frame.bind("<Configure>", self._on_frame_configure)

        # Build UI
        self._create_widgets()

    def _create_widgets(self):
        """Create top search section."""
        search_frame = tk.Frame(self.inner_frame, bg="white")
        search_frame.pack(pady=10)

        tk.Label(search_frame, text="Search Product:", font=("Arial", 12, "bold"), bg="white").pack(side="left")
        self.search_entry = tk.Entry(search_frame, width=40)
        self.search_entry.pack(side="left", padx=5)

        self.flipkart_var = tk.BooleanVar()
        tk.Checkbutton(search_frame, text="Flipkart", variable=self.flipkart_var, bg="white").pack(side="left")

        tk.Button(search_frame, text="Search", command=self._search_products, bg="#0066cc", fg="white").pack(side="left", padx=5)

        self.results_frame = tk.Frame(self.inner_frame, bg="white")
        self.results_frame.pack(fill="both", expand=True)

    def _on_frame_configure(self, event):
        self.canvas.configure(scrollregion=self.canvas.bbox("all"))

    def _search_products(self):
        """Fetch product results from Flipkart."""
        for widget in self.results_frame.winfo_children():
            widget.destroy()

        query = self.search_entry.get().strip()
        if not query or not self.flipkart_var.get():
            tk.Label(self.results_frame, text="Please enter a product name and select Flipkart.",
                     fg="red", bg="white").pack(pady=10)
            return

        url = f"https://www.flipkart.com/search?q={query}"
        try:
            response = requests.get(url, headers={"User-Agent": "Mozilla/5.0"})
            soup = BeautifulSoup(response.content, "html.parser")
            products = soup.find_all("div", class_=["_1AtVbE", "_13oc-S"])

            if not products:
                tk.Label(self.results_frame, text="No products found.", bg="white", fg="gray").pack(pady=10)
                return

            for product in products[:10]:  # Show top 10 results
                title = product.find("a", class_="IRpwTa") or product.find("div", class_="_4rR01T")
                price = product.find("div", class_="_30jeq3")
                image = product.find("img", class_="CXW8mj")

                if not title or not price:
                    continue

                card = tk.Frame(self.results_frame, bg="#f9f9f9", relief="ridge", bd=1)
                card.pack(fill="x", padx=10, pady=6)

                # Load image if available
                if image and image.get("src"):
                    try:
                        img_data = urlopen(image["src"]).read()
                        img = Image.open(io.BytesIO(img_data))
                        img.thumbnail((100, 100))
                        photo = ImageTk.PhotoImage(img)
                        img_label = tk.Label(card, image=photo, bg="white")
                        img_label.image = photo  # Keep reference
                        img_label.pack(side="left", padx=10, pady=10)
                    except Exception:
                        pass

                info_frame = tk.Frame(card, bg="#f9f9f9")
                info_frame.pack(side="left", fill="both", expand=True)

                tk.Label(info_frame, text=title.get_text(), bg="#f9f9f9",
                         font=("Arial", 12, "bold"), wraplength=400, justify="left").pack(anchor="w")
                tk.Label(info_frame, text=price.get_text(), bg="#f9f9f9",
                         fg="green", font=("Arial", 11, "bold")).pack(anchor="w", pady=2)

        except Exception as e:
            tk.Label(self.results_frame, text=f"Error fetching results: {e}", fg="red", bg="white").pack(pady=10)


def main():
    root = tk.Tk()
    root.title("Product Browser")
    root.geometry("700x600")
    app = ProductBrowser(root)
    app.pack(fill="both", expand=True)
    root.mainloop()


if __name__ == "__main__":
    main()
